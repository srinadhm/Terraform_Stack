Terraform Installation 
######################

wget https://releases.hashicorp.com/terraform/0.15.4/terraform_0.15.4_linux_amd64.zip
unzip terraform_0.15.4_linux_amd64.zip
cp terraform /usr/bin/
terraform -v 

Terraform will support for all cloud providers of aws,azure,gcp

If we want to manage/update/create any service using terraform first we need to decide on which cloud platform we need to manage services

For example if we want to create ec2 instance in aws we need to use aws related providers plugin or tags

Whatever service we can create in aws terraform treats as resource for example ec2 instance creation ec2 related resources tags are used.

Here also as we are managing aws services we need IAM user (with AmazonEC2FullAccess ) or IAM role (with AmazonEC2FullAccess) 

If we create IAM user configure ACCESS_KEY and SECRET_KEY with aws cli aws configure.Like if we want to create ec2 instance from local machine then we can configure access and secret keys.
If we create IAM role attach to exising Ec2 instance in which terraform is installed.


1.Create IAM user and add credentials using aws cli 

[root@ip-172-31-94-5 ~]# aws configure
AWS Access Key ID [None]: AKIAWED4YLURUAEDTVP6
AWS Secret Access Key [None]: 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
Default region name [None]: us-east-1
Default output format [None]:

Credentials will be stored in below location  (.aws/credentials)

/root/.aws/credentials 

[root@ip-172-31-94-5 .aws]# cat credentials
[default]
aws_access_key_id = AKIAWED4YLURUAEDTVP6
aws_secret_access_key = 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

[root@ip-172-31-94-5 .aws]# cat config
[default]
region = us-east-1

2.Click on instance name ---- > Go to Actions ----> Security ---> Modify IAM role ---> ec2-for-ansible-playbook  (AmazonEC2FullAccess)

Create ec2 instance using terraform 
##################################


data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}

resource "aws_instance" "web" {
  ami           = data.aws_ami.ubuntu.id
  instance_type = "t3.micro"

  tags = {
    Name = "HelloWorld"
  }
}

AMI Name : ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server

Terraform file extension will be .tf

1.Terraform Authentication to access/manage aws services we need to create IAM user and add credentials to the provider.Similar to this terraform authentication will be done in different ways 

Authentication
The AWS provider offers a flexible means of providing credentials for authentication. The following methods are supported, in this order, and explained below:

Static credentials

Environment variables
Shared credentials/configuration file
CodeBuild, ECS, and EKS Roles
EC2 Instance Metadata Service (IMDS and IMDSv2)

Environment variables approach
export AWS_ACCESS_KEY_ID="AKIAWED4YLURUAEDTVP6"
export AWS_SECRET_ACCESS_KEY="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"

2.As we are managing aws services we need to get the terraform aws provider 

vi provider.tf (with static credentials)

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
  }
}

# Configure the AWS Provider
provider "aws" {
  region = "us-east-1"
  access_key = "AKIAWED4YLURUVRJVANG"
  secret_key = "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"
}

################################

Access and Secret key with setting environment variables


terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
  }
}

# Configure the AWS Provider
provider "aws" {
  region = "us-east-1"
}


  
export AWS_ACCESS_KEY_ID="AKIAWED4YLURUVRJVANG"
export AWS_SECRET_ACCESS_KEY="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"
terraform plan 





3.We need to write the resource file which aws services we are going to manage.

vi main.tf or resource.tf 

resource "aws_instance" "web" {
  ami           = "ami-0b0af3577fe5e3532"  # redhat ami Id
  instance_type = "t2.micro"  # instance type
  key_name = "aws-devops"     # key pair name 
  tags = {
    Name = "HelloWorld"
  }
}


4.To initialize terraform and install required cloud providers we need to use terraform init.

terraform init  : The terraform binary contains the basic functionality for Terraform, but it does not come with the code for any of the cloud providers, so when you’re first starting to use Terraform, you need to run terraform init to tell Terraform to scan the code, figure out which providers you’re using, and download the code for them. By default, the provider code will be downloaded into a .terraform folder, which is Terraform’s scratch directory. You need to run init any time you start with new Terraform code, and that it’s safe to run init multiple times (the command is idempotent).

[root@ip-172-31-87-217 terraform-workspace]# terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v3.67.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.


5.After terraform init we can verify what are the parameters got created before creating instance its like sanity check.using terraform plan command

[root@ip-172-31-87-217 terraform-workspace]# terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.web will be created
  + resource "aws_instance" "web" {
      + ami                                  = "ami-0b0af3577fe5e3532"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "aws-devops"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "HelloWorld"
        }
      + tags_all                             = {
          + "Name" = "HelloWorld"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run
"terraform apply" now.

aws_instance.web: Refreshing state... [id=i-00131b6db355860a9]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # aws_instance.web must be replaced
-/+ resource "aws_instance" "web" {
      ~ ami                                  = "ami-0b0af3577fe5e3532" -> "ami-04902260ca3d33422" # forces replacement
      ~ arn                                  = "arn:aws:ec2:us-east-1:421168438563:instance/i-00131b6db355860a9" -> (known after apply)
      ~ associate_public_ip_address          = true -> (known after apply)
      ~ availability_zone                    = "us-east-1a" -> (known after apply)
      ~ cpu_core_count                       = 1 -> (known after apply)
      ~ cpu_threads_per_core                 = 1 -> (known after apply)
      ~ disable_api_termination              = false -> (known after apply)
      ~ ebs_optimized                        = false -> (known after apply)
      - hibernation                          = false -> null
      + host_id                              = (known after apply)
      ~ id                                   = "i-00131b6db355860a9" -> (known after apply)
      ~ instance_initiated_shutdown_behavior = "stop" -> (known after apply)
      ~ instance_state                       = "running" -> (known after apply)
      ~ ipv6_address_count                   = 0 -> (known after apply)
      ~ ipv6_addresses                       = [] -> (known after apply)
      ~ monitoring                           = false -> (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      ~ primary_network_interface_id         = "eni-0490e8f55c8197be6" -> (known after apply)
      ~ private_dns                          = "ip-172-31-88-184.ec2.internal" -> (known after apply)
      ~ private_ip                           = "172.31.88.184" -> (known after apply)
      ~ public_dns                           = "ec2-3-87-213-241.compute-1.amazonaws.com" -> (known after apply)
      ~ public_ip                            = "3.87.213.241" -> (known after apply)
      ~ secondary_private_ips                = [] -> (known after apply)
      ~ security_groups                      = [
          - "default",
        ] -> (known after apply)
      ~ subnet_id                            = "subnet-2a237f0b" -> (known after apply)
        tags                                 = {
            "Name" = "HelloWorld"
        }
      ~ tenancy                              = "default" -> (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      ~ vpc_security_group_ids               = [
          - "sg-27d9ed3d",
        ] -> (known after apply)
        # (5 unchanged attributes hidden)

      ~ capacity_reservation_specification {
          ~ capacity_reservation_preference = "open" -> (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      ~ enclave_options {
          ~ enabled = false -> (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      ~ metadata_options {
          ~ http_endpoint               = "enabled" -> (known after apply)
          ~ http_put_response_hop_limit = 1 -> (known after apply)
          ~ http_tokens                 = "optional" -> (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      ~ root_block_device {
          ~ delete_on_termination = true -> (known after apply)
          ~ device_name           = "/dev/sda1" -> (known after apply)
          ~ encrypted             = false -> (known after apply)
          ~ iops                  = 100 -> (known after apply)
          + kms_key_id            = (known after apply)
          ~ tags                  = {} -> (known after apply)
          ~ throughput            = 0 -> (known after apply)
          ~ volume_id             = "vol-00e34bd9e8b9ad857" -> (known after apply)
          ~ volume_size           = 10 -> (known after apply)
          ~ volume_type           = "gp2" -> (known after apply)
        }
    }

Plan: 1 to add, 0 to change, 1 to destroy.

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run
"terraform apply" now.


6.terraform apply --auto-approve ( wont prompt for yes ) or terraform apply (prompt for yes )

[root@ip-172-31-87-217 terraform-workspace]# terraform apply
aws_instance.web: Refreshing state... [id=i-00131b6db355860a9]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # aws_instance.web must be replaced
-/+ resource "aws_instance" "web" {
      ~ ami                                  = "ami-0b0af3577fe5e3532" -> "ami-04902260ca3d33422" # forces replacement
      ~ arn                                  = "arn:aws:ec2:us-east-1:421168438563:instance/i-00131b6db355860a9" -> (known after apply)
      ~ associate_public_ip_address          = true -> (known after apply)
      ~ availability_zone                    = "us-east-1a" -> (known after apply)
      ~ cpu_core_count                       = 1 -> (known after apply)
      ~ cpu_threads_per_core                 = 1 -> (known after apply)
      ~ disable_api_termination              = false -> (known after apply)
      ~ ebs_optimized                        = false -> (known after apply)
      - hibernation                          = false -> null
      + host_id                              = (known after apply)
      ~ id                                   = "i-00131b6db355860a9" -> (known after apply)
      ~ instance_initiated_shutdown_behavior = "stop" -> (known after apply)
      ~ instance_state                       = "running" -> (known after apply)
      ~ ipv6_address_count                   = 0 -> (known after apply)
      ~ ipv6_addresses                       = [] -> (known after apply)
      ~ monitoring                           = false -> (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      ~ primary_network_interface_id         = "eni-0490e8f55c8197be6" -> (known after apply)
      ~ private_dns                          = "ip-172-31-88-184.ec2.internal" -> (known after apply)
      ~ private_ip                           = "172.31.88.184" -> (known after apply)
      ~ public_dns                           = "ec2-3-87-213-241.compute-1.amazonaws.com" -> (known after apply)
      ~ public_ip                            = "3.87.213.241" -> (known after apply)
      ~ secondary_private_ips                = [] -> (known after apply)
      ~ security_groups                      = [
          - "default",
        ] -> (known after apply)
      ~ subnet_id                            = "subnet-2a237f0b" -> (known after apply)
        tags                                 = {
            "Name" = "HelloWorld"
        }
      ~ tenancy                              = "default" -> (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      ~ vpc_security_group_ids               = [
          - "sg-27d9ed3d",
        ] -> (known after apply)
        # (5 unchanged attributes hidden)

      ~ capacity_reservation_specification {
          ~ capacity_reservation_preference = "open" -> (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      ~ enclave_options {
          ~ enabled = false -> (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      ~ metadata_options {
          ~ http_endpoint               = "enabled" -> (known after apply)
          ~ http_put_response_hop_limit = 1 -> (known after apply)
          ~ http_tokens                 = "optional" -> (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      ~ root_block_device {
          ~ delete_on_termination = true -> (known after apply)
          ~ device_name           = "/dev/sda1" -> (known after apply)
          ~ encrypted             = false -> (known after apply)
          ~ iops                  = 100 -> (known after apply)
          + kms_key_id            = (known after apply)
          ~ tags                  = {} -> (known after apply)
          ~ throughput            = 0 -> (known after apply)
          ~ volume_id             = "vol-00e34bd9e8b9ad857" -> (known after apply)
          ~ volume_size           = 10 -> (known after apply)
          ~ volume_type           = "gp2" -> (known after apply)
        }
    }

Plan: 1 to add, 0 to change, 1 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.web: Destroying... [id=i-00131b6db355860a9]
aws_instance.web: Still destroying... [id=i-00131b6db355860a9, 10s elapsed]
aws_instance.web: Still destroying... [id=i-00131b6db355860a9, 20s elapsed]
aws_instance.web: Destruction complete after 29s
aws_instance.web: Creating...
aws_instance.web: Still creating... [10s elapsed]
aws_instance.web: Still creating... [20s elapsed]
aws_instance.web: Still creating... [30s elapsed]
aws_instance.web: Still creating... [40s elapsed]
aws_instance.web: Creation complete after 43s [id=i-05e9e12f51fd9e7ff]

Apply complete! Resources: 1 added, 0 changed, 1 destroyed.

7.Go to the AWS Management console and instance we can see with name HelloWorld which we mentioned same in main.tf 

8.We can terminate the ec2 instance by using terraform with terraform destroy command 

terraform destroy 
